From 8353ed0ad5634cee0d66936e5ccbe54aa845dff7 Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@ycbcr.xyz>
Date: Thu, 3 Oct 2019 14:05:40 +0200
Subject: [PATCH 2/9] avcodec/dxva2_hevc: add support for parsing HEVC Range
 Extension data

---
 libavcodec/d3d11va.h        |  2 ++
 libavcodec/d3d12va_hevc.c   |  9 +++++---
 libavcodec/dxva2.c          | 19 ++++++++++++++++
 libavcodec/dxva2.h          |  2 ++
 libavcodec/dxva2_hevc.c     | 43 ++++++++++++++++++++++++++++++++-----
 libavcodec/dxva2_internal.h | 41 ++++++++++++++++++++++++++++++++++-
 6 files changed, 107 insertions(+), 9 deletions(-)

diff --git a/libavcodec/d3d11va.h b/libavcodec/d3d11va.h
index 27f40e5519..67ce8d3871 100644
--- a/libavcodec/d3d11va.h
+++ b/libavcodec/d3d11va.h
@@ -38,6 +38,8 @@
 #include <stdint.h>
 #include <d3d11.h>
 
+#define FF_DXVA2_WORKAROUND_HEVC_REXT  4
+
 /**
  * @defgroup lavc_codec_hwaccel_d3d11va Direct3D11
  * @ingroup lavc_codec_hwaccel
diff --git a/libavcodec/d3d12va_hevc.c b/libavcodec/d3d12va_hevc.c
index 7686f0eb6c..2b1633fca9 100644
--- a/libavcodec/d3d12va_hevc.c
+++ b/libavcodec/d3d12va_hevc.c
@@ -33,7 +33,7 @@
 #define MAX_SLICES 256
 
 typedef struct HEVCDecodePictureContext {
-    DXVA_PicParams_HEVC    pp;
+    DXVA_PicParams_HEVC_Rext pp;
     DXVA_Qmatrix_HEVC      qm;
     unsigned               slice_count;
     DXVA_Slice_HEVC_Short  slice_short[MAX_SLICES];
@@ -148,15 +148,18 @@ static int update_input_arguments(AVCodecContext *avctx, D3D12_VIDEO_DECODE_INPU
 
 static int d3d12va_hevc_end_frame(AVCodecContext *avctx)
 {
+    D3D12VADecodeContext     *ctx     = D3D12VA_DECODE_CONTEXT(avctx);
     HEVCContext              *h       = avctx->priv_data;
     HEVCDecodePictureContext *ctx_pic = h->cur_frame->hwaccel_picture_private;
+    int rext = (DXVA_CONTEXT_WORKAROUND(avctx, ((AVDXVAContext *)ctx)) & FF_DXVA2_WORKAROUND_INTEL_HEVC_REXT);
 
-    int scale = ctx_pic->pp.dwCodingParamToolFlags & 1;
+    int scale = ctx_pic->pp.main.dwCodingParamToolFlags & 1;
 
     if (ctx_pic->slice_count <= 0 || ctx_pic->bitstream_size <= 0)
         return -1;
 
-    return ff_d3d12va_common_end_frame(avctx, h->cur_frame->f, &ctx_pic->pp, sizeof(ctx_pic->pp),
+    return ff_d3d12va_common_end_frame(avctx, h->cur_frame->f,
+               &ctx_pic->pp, rext ? sizeof(ctx_pic->pp) : sizeof(ctx_pic->pp.main),
                scale ? &ctx_pic->qm : NULL, scale ? sizeof(ctx_pic->qm) : 0, update_input_arguments);
 }
 
diff --git a/libavcodec/dxva2.c b/libavcodec/dxva2.c
index 22ecd5acaf..f7b0c5aed2 100644
--- a/libavcodec/dxva2.c
+++ b/libavcodec/dxva2.c
@@ -51,6 +51,15 @@ DEFINE_GUID(ff_DXVA2_NoEncrypt,          0x1b81beD0, 0xa0c7,0x11d3,0xb9,0x84,0x0
 DEFINE_GUID(ff_GUID_NULL,                0x00000000, 0x0000,0x0000,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 DEFINE_GUID(ff_IID_IDirectXVideoDecoderService, 0xfc51a551,0xd5e7,0x11d9,0xaf,0x55,0x00,0x05,0x4e,0x43,0xff,0x02);
 
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main_Intel,           0x8c56eb1e, 0x2b47, 0x466f, 0x8d, 0x33, 0x7d, 0xbc, 0xd6, 0x3f, 0x3d, 0xf2);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main10_Intel,         0x75fc75f7, 0xc589, 0x4a07, 0xa2, 0x5b, 0x72, 0xe0, 0x3b, 0x03, 0x83, 0xb3);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main12_Intel,         0x8ff8a3aa, 0xc456, 0x4132, 0xb6, 0xef, 0x69, 0xd9, 0xdd, 0x72, 0x57, 0x1d);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main422_10_Intel,     0xe484dcb8, 0xcac9, 0x4859, 0x99, 0xf5, 0x5c, 0x0d, 0x45, 0x06, 0x90, 0x89);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main422_12_Intel,     0xc23dd857, 0x874b, 0x423c, 0xb6, 0xe0, 0x82, 0xce, 0xaa, 0x9b, 0x11, 0x8a);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main444_Intel,        0x41a5af96, 0xe415, 0x4b0c, 0x9d, 0x03, 0x90, 0x78, 0x58, 0xe2, 0x3e, 0x78);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main444_10_Intel,     0x6a6a81ba, 0x912a, 0x485d, 0xb5, 0x7f, 0xcc, 0xd2, 0xd3, 0x7b, 0x8d, 0x94);
+DEFINE_GUID(ff_DXVA_ModeHEVC_VLD_Main444_12_Intel,     0x5b08e35d, 0x0c66, 0x4c51, 0xa6, 0xf1, 0x89, 0xd0, 0x0c, 0xb2, 0xc1, 0x97);
+
 typedef struct dxva_mode {
     const GUID     *guid;
     enum AVCodecID codec;
@@ -302,6 +311,16 @@ static int dxva_get_decoder_guid(AVCodecContext *avctx, void *service, void *sur
     if (IsEqualGUID(decoder_guid, &ff_DXVADDI_Intel_ModeH264_E))
         sctx->workaround |= FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO;
 
+    if (IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main10_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main12_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main422_10_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main422_12_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main444_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main444_10_Intel) ||
+        IsEqualGUID(decoder_guid, &ff_DXVA_ModeHEVC_VLD_Main444_12_Intel))
+        sctx->workaround |= FF_DXVA2_WORKAROUND_INTEL_HEVC_REXT;
+
     return 0;
 }
 
diff --git a/libavcodec/dxva2.h b/libavcodec/dxva2.h
index bdec6112e9..1520964878 100644
--- a/libavcodec/dxva2.h
+++ b/libavcodec/dxva2.h
@@ -38,6 +38,8 @@
 #include <d3d9.h>
 #include <dxva2api.h>
 
+#define FF_DXVA2_WORKAROUND_HEVC_REXT  4
+
 /**
  * @defgroup lavc_codec_hwaccel_dxva2 DXVA2
  * @ingroup lavc_codec_hwaccel
diff --git a/libavcodec/dxva2_hevc.c b/libavcodec/dxva2_hevc.c
index d01d1e76e8..cc922f5077 100644
--- a/libavcodec/dxva2_hevc.c
+++ b/libavcodec/dxva2_hevc.c
@@ -28,11 +28,12 @@
 #include "hevc/data.h"
 #include "hevc/hevcdec.h"
 #include "hwaccel_internal.h"
+#include "cbs_h265.h"
 
 #define MAX_SLICES 256
 
 struct hevc_dxva2_picture_context {
-    DXVA_PicParams_HEVC   pp;
+    DXVA_PicParams_HEVC_Rext pp;
     DXVA_Qmatrix_HEVC     qm;
     unsigned              slice_count;
     DXVA_Slice_HEVC_Short slice_short[MAX_SLICES];
@@ -58,7 +59,7 @@ static int get_refpic_index(const DXVA_PicParams_HEVC *pp, int surface_index)
 }
 
 void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVAContext *ctx,
-                                    DXVA_PicParams_HEVC *pp)
+                                    DXVA_PicParams_HEVC_Rext *ppext)
 {
     const HEVCContext *h = avctx->priv_data;
     const HEVCLayerContext *l = &h->layers[h->cur_layer];
@@ -66,12 +67,42 @@ void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVACo
     const HEVCPPS *pps = h->pps;
     const HEVCSPS *sps = pps->sps;
     int i, j;
+    DXVA_PicParams_HEVC *pp = &ppext->main;
 
-    memset(pp, 0, sizeof(*pp));
+    memset(ppext, 0, sizeof(*ppext));
 
     pp->PicWidthInMinCbsY  = sps->min_cb_width;
     pp->PicHeightInMinCbsY = sps->min_cb_height;
 
+    if (sps->range_extension) {
+        ppext->dwRangeExtensionFlags |= (sps->transform_skip_rotation_enabled     <<  0) |
+                                        (sps->transform_skip_context_enabled      <<  1) |
+                                        (sps->implicit_rdpcm_enabled              <<  2) |
+                                        (sps->explicit_rdpcm_enabled              <<  3) |
+                                        (sps->extended_precision_processing       <<  4) |
+                                        (sps->intra_smoothing_disabled            <<  5) |
+                                        (sps->high_precision_offsets_enabled      <<  5) |
+                                        (sps->persistent_rice_adaptation_enabled  <<  7) |
+                                        (sps->cabac_bypass_alignment_enabled      <<  8);
+    }
+    if (pps->pps_range_extensions_flag) {
+        ppext->dwRangeExtensionFlags |= (pps->cross_component_prediction_enabled_flag  <<  9) |
+                                        (pps->chroma_qp_offset_list_enabled_flag       << 10);
+        if (pps->chroma_qp_offset_list_enabled_flag) {
+            ppext->diff_cu_chroma_qp_offset_depth   = pps->diff_cu_chroma_qp_offset_depth;
+            ppext->chroma_qp_offset_list_len_minus1 = pps->chroma_qp_offset_list_len_minus1;
+            for (i = 0; i <= pps->chroma_qp_offset_list_len_minus1; i++) {
+                ppext->cb_qp_offset_list[i] = pps->cb_qp_offset_list[i];
+                ppext->cr_qp_offset_list[i] = pps->cr_qp_offset_list[i];
+            }
+        }
+        ppext->log2_sao_offset_scale_luma   = pps->log2_sao_offset_scale_luma;
+        ppext->log2_sao_offset_scale_chroma = pps->log2_sao_offset_scale_chroma;
+        if (pps->transform_skip_enabled_flag) {
+            ppext->log2_max_transform_skip_block_size_minus2 = pps->log2_max_transform_skip_block_size - 2;
+        }
+    }
+
     pp->wFormatAndSequenceInfoFlags = (sps->chroma_format_idc             <<  0) |
                                       (sps->separate_colour_plane         <<  2) |
                                       ((sps->bit_depth - 8)               <<  3) |
@@ -411,16 +442,18 @@ static int dxva2_hevc_decode_slice(AVCodecContext *avctx,
 
 static int dxva2_hevc_end_frame(AVCodecContext *avctx)
 {
+    AVDXVAContext *ctx = DXVA_CONTEXT(avctx);
     HEVCContext *h = avctx->priv_data;
     struct hevc_dxva2_picture_context *ctx_pic = h->cur_frame->hwaccel_picture_private;
-    int scale = ctx_pic->pp.dwCodingParamToolFlags & 1;
+    int scale = ctx_pic->pp.main.dwCodingParamToolFlags & 1;
+    int rext = (DXVA_CONTEXT_WORKAROUND(avctx, ctx) & FF_DXVA2_WORKAROUND_INTEL_HEVC_REXT);
     int ret;
 
     if (ctx_pic->slice_count <= 0 || ctx_pic->bitstream_size <= 0)
         return -1;
 
     ret = ff_dxva2_common_end_frame(avctx, h->cur_frame->f,
-                                    &ctx_pic->pp, sizeof(ctx_pic->pp),
+                                    &ctx_pic->pp, rext ? sizeof(ctx_pic->pp) : sizeof(ctx_pic->pp.main),
                                     scale ? &ctx_pic->qm : NULL, scale ? sizeof(ctx_pic->qm) : 0,
                                     commit_bitstream_and_slice_buffer);
     return ret;
diff --git a/libavcodec/dxva2_internal.h b/libavcodec/dxva2_internal.h
index 224a867ebc..7f3e5938ac 100644
--- a/libavcodec/dxva2_internal.h
+++ b/libavcodec/dxva2_internal.h
@@ -33,6 +33,7 @@
 
 #define FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG 1 ///< Work around for DXVA2/Direct3D11 and old UVD/UVD+ ATI video cards
 #define FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO    2 ///< Work around for DXVA2/Direct3D11 and old Intel GPUs with ClearVideo interface
+#define FF_DXVA2_WORKAROUND_INTEL_HEVC_REXT     4 ///< Signal the DXVA2 decoder is using the HEVC Rext picture structure
 
 #if CONFIG_DXVA2
 #include "dxva2.h"
@@ -113,6 +114,44 @@ typedef struct FFDXVASharedContext {
     AVDXVAContext ctx;
 } FFDXVASharedContext;
 
+#pragma pack(push, 1)
+typedef struct
+{
+    DXVA_PicParams_HEVC main;
+
+    // HEVC Range Extension
+    union {
+        struct {
+            UINT32 transform_skip_rotation_enabled_flag : 1;
+            UINT32 transform_skip_context_enabled_flag : 1;
+            UINT32 implicit_rdpcm_enabled_flag : 1;
+            UINT32 explicit_rdpcm_enabled_flag : 1;
+            UINT32 extended_precision_processing_flag : 1;
+            UINT32 intra_smoothing_disabled_flag : 1;
+            UINT32 high_precision_offsets_enabled_flag : 1;
+            UINT32 persistent_rice_adaptation_enabled_flag : 1;
+            UINT32 cabac_bypass_alignment_enabled_flag : 1;
+            UINT32 cross_component_prediction_enabled_flag : 1;
+            UINT32 chroma_qp_offset_list_enabled_flag : 1;
+            UINT32 BitDepthLuma16 : 1; // TODO merge in ReservedBits5 if not needed
+            UINT32 BitDepthChroma16 : 1; // TODO merge in ReservedBits5 if not needed
+            UINT32 ReservedBits8 : 19;
+        };
+        UINT32 dwRangeExtensionFlags;
+    };
+
+    UCHAR diff_cu_chroma_qp_offset_depth;
+    UCHAR chroma_qp_offset_list_len_minus1;
+    UCHAR log2_sao_offset_scale_luma;
+    UCHAR log2_sao_offset_scale_chroma;
+    UCHAR log2_max_transform_skip_block_size_minus2;
+    CHAR cb_qp_offset_list[6];
+    CHAR cr_qp_offset_list[6];
+
+} DXVA_PicParams_HEVC_Rext;
+#pragma pack(pop)
+
+
 #define DXVA_SHARED_CONTEXT(avctx) ((FFDXVASharedContext *)((avctx)->internal->hwaccel_priv_data))
 
 #define DXVA_CONTEXT(avctx) (AVDXVAContext *)((avctx)->hwaccel_context ? (avctx)->hwaccel_context : (&(DXVA_SHARED_CONTEXT(avctx)->ctx)))
@@ -171,7 +210,7 @@ void ff_dxva2_h264_fill_picture_parameters(const AVCodecContext *avctx, AVDXVACo
 
 void ff_dxva2_h264_fill_scaling_lists(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_Qmatrix_H264 *qm);
 
-void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_PicParams_HEVC *pp);
+void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_PicParams_HEVC_Rext *pp);
 
 void ff_dxva2_hevc_fill_scaling_lists(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_Qmatrix_HEVC *qm);
 
-- 
2.45.0.windows.1

